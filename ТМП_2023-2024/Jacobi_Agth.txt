Функция «jacobi» реализует итерационный метод Якоби для решения системы линейных уравнений Ax = b, 
где A — квадратная матрица размера n x n, b — вектор, а x — вектор,
содержащий решение системы уравнений. Ниже приведено пошаговое объяснение алгоритма этой функции:

1. Инициализируйте переменные:
    - `x_new`: массив для хранения нового значения вектора x после каждой итерации.
    - `iterations`: переменная, подсчитывающая количество итераций.
    - `error`: переменная, которая оценивается как ошибка, инициализируется значением эпсилон + 1 для обеспечения входа в цикл.

2. Выполнять цикл до тех пор, пока не будет достигнуто условие остановки:
    — Внешний цикл проверяет два условия остановки: ошибка меньше эпсилона или достигнуто максимальное количество итераций (maxIterations).
    - В цикле применяется алгоритм Якоби для вычисления нового значения вектора x.
    - Для каждого элемента x[i] вычисляем сумму элементов a[i][j] * x[j] (кроме элементов a[i][i] и x[i]).
    - Затем x_new[i] рассчитывается по формуле x_new[i] = (b[i] - сумма)/a[i][i].

3. Рассчитайте ошибку и обновите вектор x:
    - После вычисления нового значения вектора x вычисляем ошибку,
     вычисляя сумму абсолютного значения разницы между элементами x_new[i] и x[i] с помощью функции fabs(x_new[i] - x[i] ]).
    - Далее вектор x обновляется новым значением x[i] = x_new[i].

4. Увеличить счетчик итераций («итераций») на 1.

5. Проверьте условия остановки:
    - Если количество итераций («iterations») превышает максимальное количество итераций («maxIterations»), выведите сообщение о том, что решение не найдено.
    - В противном случае распечатайте приближенное решение системы уравнений, хранящееся в векторе x.

Короче говоря, функция «Якоби» реализует алгоритм Якоби для решения системы линейных уравнений с использованием итерационного метода. 
Он итеративно вычисляет новое значение вектора x до тех пор, пока не будет достигнута желаемая ошибка или максимальное количество итераций.